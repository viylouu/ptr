// stdarr.ptr

lib stdmem
lib stdif
lib stdloop

conc :: {
    // arr: pointer to start of array
    // ptr: pointer to data
    // off: byte offset of ptr in arr
    // bytes: bytes of ptr to copy
    halloc arrcpy : [arr, ptr, off, bytes] : &loc(2)
    conc : [arr, ptr, off, bytes] : {
        salloc barr :: byte(8)
        salloc bptr :: byte(8)
        barr = arr + off
        bptr = ptr + off

        salloc i :: &byte(4)
        i^ = 0

        salloc ifr :: &byte(1)
        conc : <salloc if :: &loc(this)> [i, bytes, ifr] : { ifr^ = i < bytes }
        conc : <salloc do :: &loc(this)> [i, barr, bptr]: { 
            (barr+i^)^ = (bptr+i^)^ 
            i^ = i^ + 1
        }

        jmp while :: [if :: [i^, bytes, ifr], ifr, do :: [i, barr, bptr]]
    }

    end :: {
        jmp free :: [arrcpy]
    }
}
